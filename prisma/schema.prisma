generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  email          String?         @unique
  emailVerified  DateTime?
  name           String?
  image          String?
  accounts       Account[]
  clientReports  ClientReport[]
  googleAccounts GoogleAccount[]
  reports        Report[]
  sessions       Session[]
  googleTokens   GoogleTokens[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Report {
  id              String    @id @default(cuid())
  name            String
  userId          String
  propertyId      String?
  siteUrl         String?
  dateRange       String
  metrics         String
  data            String?
  shareToken      String?   @unique
  isPublic        Boolean   @default(false)
  refreshInterval Int?
  lastRefreshed   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ClientReport {
  id                      String            @id @default(cuid())
  clientName              String
  reportName              String
  googleAccountId         String
  ga4PropertyId           String
  searchConsolePropertyId String
  shareableLink           String            @unique
  shareableId             String            @unique
  isActive                Boolean           @default(true)
  refreshInterval         String            @default("daily")
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  userId                  String
  user                    User              @relation(fields: [userId], references: [id])
  accessLogs              ReportAccessLog[]
  cache                   ReportCache[]
}

model ReportAccessLog {
  id         String       @id @default(cuid())
  reportId   String
  ipAddress  String?
  userAgent  String?
  accessedAt DateTime     @default(now())
  report     ClientReport @relation(fields: [reportId], references: [id])
}

model ReportCache {
  id        String       @id @default(cuid())
  reportId  String
  dataType  String
  data      String
  cachedAt  DateTime     @default(now())
  expiresAt DateTime
  report    ClientReport @relation(fields: [reportId], references: [id])
}

model Log {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  level     String
  source    String
  requestId String?
  userId    String?
  accountId String?
  message   String
  meta      String?

  @@index([createdAt, source])
}

model GoogleTokens {
  id            String   @id @default(cuid())
  google_sub    String
  email         String?
  access_token  String?
  refresh_token String?
  scope         String?
  expires_at    BigInt?
  created_at    DateTime @default(now()) @map("created_at")
  updated_at    DateTime @default(now()) @updatedAt @map("updated_at")
  userId        String?
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, google_sub])
  @@index([userId])
  @@map("google_tokens")
}

model GoogleAccount {
  id           String   @id @default(cuid())
  userId       String
  email        String   @unique
  accessToken  String
  refreshToken String?
  expiresAt    Int?
  scope        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
