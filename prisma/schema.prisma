generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  email          String?         @unique
  emailVerified  DateTime?
  name           String?
  image          String?
  accounts       Account[]
  clientReports  ClientReport[]
  googleAccounts GoogleAccount[]
  reports        Report[]
  sessions       Session[]
  googleTokens   GoogleTokens[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Report {
  id              String                @id @default(cuid())
  name            String
  userId          String
  propertyId      String?
  siteUrl         String?
  dateRange       String
  metrics         String
  data            String?
  shareToken      String?               @unique
  isPublic        Boolean               @default(false)
  refreshInterval Int?
  lastRefreshed   DateTime?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  seoAudits       SEOAudit[]
  coreWebVitals   CoreWebVitalsMetric[]
  pageSpeedAudits PageSpeedAudit[]
}

model ClientReport {
  id                      String            @id @default(cuid())
  clientName              String
  reportName              String
  googleAccountId         String
  ga4PropertyId           String
  searchConsolePropertyId String
  shareableLink           String            @unique
  shareableId             String            @unique
  isActive                Boolean           @default(true)
  refreshInterval         String            @default("daily")
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  userId                  String
  user                    User              @relation(fields: [userId], references: [id])
  accessLogs              ReportAccessLog[]
  cache                   ReportCache[]
  seoAudits               SEOAudit[]
}

model ReportAccessLog {
  id         String       @id @default(cuid())
  reportId   String
  ipAddress  String?
  userAgent  String?
  accessedAt DateTime     @default(now())
  report     ClientReport @relation(fields: [reportId], references: [id])
}

model ReportCache {
  id        String       @id @default(cuid())
  reportId  String
  dataType  String
  data      String
  cachedAt  DateTime     @default(now())
  expiresAt DateTime
  report    ClientReport @relation(fields: [reportId], references: [id])
}

model Log {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  level     String
  source    String
  requestId String?
  userId    String?
  accountId String?
  message   String
  meta      String?

  @@index([createdAt, source])
}

model GoogleTokens {
  id            String   @id @default(cuid())
  google_sub    String
  email         String?
  access_token  String?
  refresh_token String?
  scope         String?
  expires_at    BigInt?
  created_at    DateTime @default(now()) @map("created_at")
  updated_at    DateTime @default(now()) @updatedAt @map("updated_at")
  userId        String?
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, google_sub])
  @@index([userId])
  @@map("google_tokens")
}

model GoogleAccount {
  id           String   @id @default(cuid())
  userId       String
  email        String   @unique
  accessToken  String
  refreshToken String?
  expiresAt    Int?
  scope        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SEOAudit {
  id                   String                @id @default(cuid())
  reportId             String?
  clientReportId       String?
  domain               String
  url                  String
  overallScore         Int                   @default(0)
  performanceScore     Int                   @default(0)
  seoScore             Int                   @default(0)
  accessibilityScore   Int                   @default(0)
  securityScore        Int                   @default(0)
  mobileScore          Int                   @default(0)
  coreWebVitals        String? // LCP, FID, CLS, TTFB, FCP, INP
  pageSpeedMetrics     String? // Desktop/Mobile PageSpeed data
  mobileUsability      String? // Mobile-friendly test results
  crawlabilityData     String? // Robots.txt, sitemap analysis
  metaTagsAnalysis     String? // Title, description, canonical, hreflang
  structuredData       String? // Schema markup validation
  securityChecks       String? // HTTPS, mixed content, headers
  imageOptimization    String? // Image analysis data
  resourceOptimization String? // CSS/JS optimization data
  linkAnalysis         String? // Internal/external links
  redirectChains       String? // Redirect analysis
  errorPages           String? // 404 and other errors
  duplicateContent     String? // Content duplication issues
  technicalIssues      String? // Technical SEO problems
  recommendations      String? // Prioritized action items
  auditedAt            DateTime              @default(now())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  report               Report?               @relation(fields: [reportId], references: [id], onDelete: Cascade)
  clientReport         ClientReport?         @relation(fields: [clientReportId], references: [id], onDelete: Cascade)
  auditHistory         SEOAuditHistory[]
  coreWebVitalsMetrics CoreWebVitalsMetric[]
  pageSpeedAudits      PageSpeedAudit[]

  @@index([reportId])
  @@index([clientReportId])
  @@index([domain])
  @@index([auditedAt])
}

model SEOAuditHistory {
  id            String   @id @default(cuid())
  auditId       String
  changeType    String // 'score_improvement', 'new_issue', 'issue_resolved'
  category      String // 'performance', 'seo', 'accessibility', 'security', 'mobile'
  previousValue String?
  currentValue  String?
  description   String
  impact        String? // 'high', 'medium', 'low'
  detectedAt    DateTime @default(now())
  audit         SEOAudit @relation(fields: [auditId], references: [id], onDelete: Cascade)

  @@index([auditId])
  @@index([detectedAt])
}

model CoreWebVitalsMetric {
  id         String    @id @default(cuid())
  auditId    String?
  reportId   String?
  url        String
  device     String // 'mobile' | 'desktop'
  lcp        Float? // Largest Contentful Paint
  fid        Float? // First Input Delay
  cls        Float? // Cumulative Layout Shift
  ttfb       Float? // Time to First Byte
  fcp        Float? // First Contentful Paint
  inp        Float? // Interaction to Next Paint
  lcpGrade   String? // 'good', 'needs-improvement', 'poor'
  fidGrade   String?
  clsGrade   String?
  ttfbGrade  String?
  fcpGrade   String?
  inpGrade   String?
  measuredAt DateTime  @default(now())
  audit      SEOAudit? @relation(fields: [auditId], references: [id], onDelete: Cascade)
  report     Report?   @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([auditId])
  @@index([reportId])
  @@index([url])
  @@index([measuredAt])
}

model PageSpeedAudit {
  id               String    @id @default(cuid())
  auditId          String?
  reportId         String?
  url              String
  device           String // 'mobile' | 'desktop'
  performanceScore Int?
  opportunities    String? // Performance optimization opportunities
  diagnostics      String? // Performance diagnostics
  labData          String? // Lab data metrics
  fieldData        String? // Real user experience data
  auditDetails     String? // Detailed audit results
  screenshots      String? // Performance screenshots
  auditedAt        DateTime  @default(now())
  audit            SEOAudit? @relation(fields: [auditId], references: [id], onDelete: Cascade)
  report           Report?   @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([auditId])
  @@index([reportId])
  @@index([url])
}
