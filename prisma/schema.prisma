// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")  // pooler - used by the app at runtime
  directUrl = env("DIRECT_URL")    // direct - used by migrations
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token") @db.Text
  access_token      String? @map("access_token") @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reports       Report[]
  clientReports ClientReport[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Report {
  id              String   @id @default(cuid())
  name            String
  userId          String
  propertyId      String?
  siteUrl         String?
  dateRange       String
  metrics         String   @db.Text
  data            String?  @db.Text
  shareToken      String?  @unique
  isPublic        Boolean  @default(false)
  refreshInterval Int?
  lastRefreshed   DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ClientReport {
  id                      String   @id @default(cuid())
  clientName              String
  reportName              String
  googleAccountId         String
  ga4PropertyId           String
  searchConsolePropertyId String
  shareableLink           String   @unique
  shareableId             String   @unique
  isActive                Boolean  @default(true)
  refreshInterval         String   @default("daily")
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  userId                  String
  user                    User     @relation(fields: [userId], references: [id])
  accessLogs              ReportAccessLog[]
  cache                   ReportCache[]
}

model ReportAccessLog {
  id           String       @id @default(cuid())
  reportId     String
  report       ClientReport @relation(fields: [reportId], references: [id])
  ipAddress    String?
  userAgent    String?  @db.Text
  accessedAt   DateTime     @default(now())
}

model ReportCache {
  id          String       @id @default(cuid())
  reportId    String
  report      ClientReport @relation(fields: [reportId], references: [id])
  dataType    String       // 'ga4', 'searchConsole', 'webVitals'
  data        String       @db.Text // JSON string
  cachedAt    DateTime     @default(now())
  expiresAt   DateTime
}