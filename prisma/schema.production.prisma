// This is your production Prisma schema file for PostgreSQL
// Use this for production deployments

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token") @db.Text
  access_token      String? @map("access_token") @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  email          String?         @unique
  emailVerified  DateTime?
  name           String?
  image          String?
  accounts       Account[]
  sessions       Session[]
  reports        Report[]
  clientReports  ClientReport[]
  googleTokens   GoogleTokens[]
  googleAccounts GoogleAccount[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Report {
  id              String    @id @default(cuid())
  name            String
  userId          String
  propertyId      String?
  siteUrl         String?
  dateRange       String
  metrics         String    @db.Text
  data            String?   @db.Text
  shareToken      String?   @unique
  isPublic        Boolean   @default(false)
  refreshInterval Int?
  lastRefreshed   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  seoAudits       SEOAudit[]
  coreWebVitals   CoreWebVitalsMetric[]
  pageSpeedAudits PageSpeedAudit[]
  actionPlans     ActionPlan[]
}

model ClientReport {
  id                      String            @id @default(cuid())
  clientName              String
  reportName              String
  googleAccountId         String
  ga4PropertyId           String
  searchConsolePropertyId String
  shareableLink           String            @unique
  shareableId             String            @unique
  isActive                Boolean           @default(true)
  refreshInterval         String            @default("daily")
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  userId                  String
  user                    User              @relation(fields: [userId], references: [id])
  accessLogs              ReportAccessLog[]
  cache                   ReportCache[]
  seoAudits               SEOAudit[]
}

model ReportAccessLog {
  id         String       @id @default(cuid())
  reportId   String
  report     ClientReport @relation(fields: [reportId], references: [id])
  ipAddress  String?
  userAgent  String?      @db.Text
  accessedAt DateTime     @default(now())
}

model ReportCache {
  id        String       @id @default(cuid())
  reportId  String
  report    ClientReport @relation(fields: [reportId], references: [id])
  dataType  String // 'ga4', 'searchConsole', 'webVitals'
  data      String       @db.Text // JSON string
  cachedAt  DateTime     @default(now())
  expiresAt DateTime
}

model Log {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  level     String // 'debug' | 'info' | 'warn' | 'error'
  source    String // e.g. 'api/google/properties'
  requestId String?
  userId    String?
  accountId String?
  message   String
  meta      Json?

  @@index([createdAt, source])
}

model GoogleTokens {
  id            String   @id @default(cuid())
  google_sub    String
  email         String?
  access_token  String?  @db.Text
  refresh_token String?  @db.Text
  scope         String?
  expires_at    BigInt? // BIGINT (epoch seconds)
  created_at    DateTime @default(now()) @map("created_at")
  updated_at    DateTime @default(now()) @updatedAt @map("updated_at")
  userId        String? // we added this

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, google_sub])
  @@index([userId])
  @@map("google_tokens")
}

model GoogleAccount {
  id           String   @id @default(cuid())
  userId       String
  email        String   @unique
  accessToken  String   @db.Text
  refreshToken String?  @db.Text
  expiresAt    Int?
  scope        String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SEOAudit {
  id                   String                @id @default(cuid())
  reportId             String?
  clientReportId       String?
  domain               String
  url                  String
  overallScore         Int                   @default(0)
  performanceScore     Int                   @default(0)
  seoScore             Int                   @default(0)
  accessibilityScore   Int                   @default(0)
  securityScore        Int                   @default(0)
  mobileScore          Int                   @default(0)
  coreWebVitals        String?               @db.Text // LCP, FID, CLS, TTFB, FCP, INP
  pageSpeedMetrics     String?               @db.Text // Desktop/Mobile PageSpeed data
  mobileUsability      String?               @db.Text // Mobile-friendly test results
  crawlabilityData     String?               @db.Text // Robots.txt, sitemap analysis
  metaTagsAnalysis     String?               @db.Text // Title, description, canonical, hreflang
  structuredData       String?               @db.Text // Schema markup validation
  securityChecks       String?               @db.Text // HTTPS, mixed content, headers
  imageOptimization    String?               @db.Text // Image analysis data
  resourceOptimization String?               @db.Text // CSS/JS optimization data
  linkAnalysis         String?               @db.Text // Internal/external links
  redirectChains       String?               @db.Text // Redirect analysis
  errorPages           String?               @db.Text // 404 and other errors
  duplicateContent     String?               @db.Text // Content duplication issues
  technicalIssues      String?               @db.Text // Technical SEO problems
  recommendations      String?               @db.Text // Prioritized action items
  auditedAt            DateTime              @default(now())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  report               Report?               @relation(fields: [reportId], references: [id], onDelete: Cascade)
  clientReport         ClientReport?         @relation(fields: [clientReportId], references: [id], onDelete: Cascade)
  auditHistory         SEOAuditHistory[]
  coreWebVitalsMetrics CoreWebVitalsMetric[]
  pageSpeedAudits      PageSpeedAudit[]

  @@index([reportId])
  @@index([clientReportId])
  @@index([domain])
  @@index([auditedAt])
}

model SEOAuditHistory {
  id            String   @id @default(cuid())
  auditId       String
  changeType    String // 'score_improvement', 'new_issue', 'issue_resolved'
  category      String // 'performance', 'seo', 'accessibility', 'security', 'mobile'
  previousValue String?
  currentValue  String?
  description   String
  impact        String? // 'high', 'medium', 'low'
  detectedAt    DateTime @default(now())
  audit         SEOAudit @relation(fields: [auditId], references: [id], onDelete: Cascade)

  @@index([auditId])
  @@index([detectedAt])
}

model CoreWebVitalsMetric {
  id         String    @id @default(cuid())
  auditId    String?
  reportId   String?
  url        String
  device     String // 'mobile' | 'desktop'
  lcp        Float? // Largest Contentful Paint
  fid        Float? // First Input Delay
  cls        Float? // Cumulative Layout Shift
  ttfb       Float? // Time to First Byte
  fcp        Float? // First Contentful Paint
  inp        Float? // Interaction to Next Paint
  lcpGrade   String? // 'good', 'needs-improvement', 'poor'
  fidGrade   String?
  clsGrade   String?
  ttfbGrade  String?
  fcpGrade   String?
  inpGrade   String?
  measuredAt DateTime  @default(now())
  audit      SEOAudit? @relation(fields: [auditId], references: [id], onDelete: Cascade)
  report     Report?   @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([auditId])
  @@index([reportId])
  @@index([url])
  @@index([measuredAt])
}

model PageSpeedAudit {
  id               String    @id @default(cuid())
  auditId          String?
  reportId         String?
  url              String
  device           String // 'mobile' | 'desktop'
  performanceScore Int?
  opportunities    String?   @db.Text // Performance optimization opportunities
  diagnostics      String?   @db.Text // Performance diagnostics
  labData          String?   @db.Text // Lab data metrics
  fieldData        String?   @db.Text // Real user experience data
  auditDetails     String?   @db.Text // Detailed audit results
  screenshots      String?   @db.Text // Performance screenshots
  auditedAt        DateTime  @default(now())
  audit            SEOAudit? @relation(fields: [auditId], references: [id], onDelete: Cascade)
  report           Report?   @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([auditId])
  @@index([reportId])
  @@index([url])
}

// PageSpeed Insights cache table
model PageAudit {
  id          String   @id @default(cuid())
  url         String
  strategy    String   // 'mobile' | 'desktop'
  source      String   // 'PSI' | 'Lighthouse'
  rawJson     String   @db.Text // JSON stored as text for PostgreSQL
  collectedAt DateTime @default(now())
  
  @@unique([url, strategy, source])
  @@index([url])
  @@index([collectedAt])
}

// Core Web Vitals measurements from CrUX
model CwvMeasurement {
  id           String   @id @default(cuid())
  url          String
  origin       String
  formFactor   String   // 'PHONE' | 'DESKTOP'
  p75LcpMs     Float    // 75th percentile LCP in milliseconds
  p75InpMs     Float    // 75th percentile INP in milliseconds
  p75Cls       Float    // 75th percentile CLS (unitless)
  p75FcpMs     Float?   // 75th percentile FCP in milliseconds
  p75TtfbMs    Float?   // 75th percentile TTFB in milliseconds
  grade        String?  // Overall grade A-F
  windowStart  DateTime
  windowEnd    DateTime
  histJson     String?  @db.Text // Full histogram data as JSON text
  collectedAt  DateTime @default(now())
  
  @@unique([url, formFactor])
  @@index([url])
  @@index([origin])
  @@index([collectedAt])
}

// Content Quality analysis
model ContentQuality {
  id                String   @id @default(cuid())
  url               String
  score             Int      // 0-100 overall score
  readabilityScore  Float    // 0-30
  tagsScore         Float    // 0-40
  mediaScore        Float    // 0-10
  linkHealthScore   Float    // 0-20
  details           String   @db.Text // Detailed metrics as JSON text
  topIssues         String   @db.Text // Array of issue strings as JSON
  collectedAt       DateTime @default(now())
  
  @@unique([url])
  @@index([url])
  @@index([collectedAt])
}

// Action Plans for SEO improvements
model ActionPlan {
  id              String             @id @default(cuid())
  reportId        String
  title           String
  description     String?
  priority        Int                @default(1)
  category        String
  status          String             @default("not_started")
  impact          String?
  effort          String?
  estimatedValue  String?
  timeframe       String?
  deadline        DateTime?
  notes           String?            @db.Text
  blockers        String?            @db.Text
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  
  report          Report             @relation(fields: [reportId], references: [id], onDelete: Cascade)
  tasks           ActionPlanTask[]
  
  @@index([reportId])
  @@index([status])
  @@index([priority])
}

model ActionPlanTask {
  id              String       @id @default(cuid())
  actionPlanId    String
  title           String
  description     String?
  isCompleted     Boolean      @default(false)
  order           Int          @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  actionPlan      ActionPlan   @relation(fields: [actionPlanId], references: [id], onDelete: Cascade)
  
  @@index([actionPlanId])
}
