// This is your production Prisma schema file for PostgreSQL
// Use this for production deployments

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token") @db.Text
  access_token      String? @map("access_token") @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reports       Report[]
  clientReports ClientReport[]
  googleTokens  GoogleTokens[]
  googleAccounts GoogleAccount[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Report {
  id              String   @id @default(cuid())
  name            String
  userId          String
  propertyId      String?
  siteUrl         String?
  dateRange       String
  metrics         String   @db.Text
  data            String?  @db.Text
  shareToken      String?  @unique
  isPublic        Boolean  @default(false)
  refreshInterval Int?
  lastRefreshed   DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ClientReport {
  id                      String   @id @default(cuid())
  clientName              String
  reportName              String
  googleAccountId         String
  ga4PropertyId           String
  searchConsolePropertyId String
  shareableLink           String   @unique
  shareableId             String   @unique
  isActive                Boolean  @default(true)
  refreshInterval         String   @default("daily")
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  userId                  String
  user                    User     @relation(fields: [userId], references: [id])
  accessLogs              ReportAccessLog[]
  cache                   ReportCache[]
}

model ReportAccessLog {
  id           String       @id @default(cuid())
  reportId     String
  report       ClientReport @relation(fields: [reportId], references: [id])
  ipAddress    String?
  userAgent    String?  @db.Text
  accessedAt   DateTime     @default(now())
}

model ReportCache {
  id          String       @id @default(cuid())
  reportId    String
  report      ClientReport @relation(fields: [reportId], references: [id])
  dataType    String       // 'ga4', 'searchConsole', 'webVitals'
  data        String       @db.Text // JSON string
  cachedAt    DateTime     @default(now())
  expiresAt   DateTime
}

model Log {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  level     String   // 'debug' | 'info' | 'warn' | 'error'
  source    String   // e.g. 'api/google/properties'
  requestId String?
  userId    String?
  accountId String?
  message   String
  meta      Json?
  @@index([createdAt, source])
}

model GoogleTokens {
  id            String   @id @default(cuid())
  google_sub    String
  email         String?
  access_token  String?  @db.Text
  refresh_token String?  @db.Text
  scope         String?
  expires_at    BigInt?  // BIGINT (epoch seconds)
  created_at    DateTime @default(now()) @map("created_at")
  updated_at    DateTime @default(now()) @updatedAt @map("updated_at")
  userId        String?  // we added this
  
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("google_tokens")
  @@index([userId])
  @@unique([userId, google_sub])
}

model GoogleAccount {
  id           String   @id @default(cuid())
  userId       String
  email        String   @unique
  accessToken  String   @db.Text
  refreshToken String?  @db.Text
  expiresAt    Int?
  scope        String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}